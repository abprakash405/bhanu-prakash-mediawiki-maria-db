# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps: 
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`. 
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon EKS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-south-1                      # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY1: bhanu-mediawiki-repo       # set this to your Amazon ECR repository name
  ECR_REPOSITORY2: bhanu-mariadb-repo         # set this to your Amazon ECR repository name
  EKS_CLUSTER: eks-mediawiki                  # set this to your Amazon EKS cluster name
  NAMESPACE: replicas-ns                      # set this to your Amazon EKS Namespace

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: AWS CLI and eksctl Installation 
      id: aws_cli_install
      run: |
        sudo apt-get update
        sudo apt-get install awscli -y
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin


    - name: Create AWS Resources using AWS CFT
      id: aws_cft
      run: |
        echo "hello world"
        #aws cloudformation create-stack --template-body file://AWS-CFT-Infra-provision.yaml --stack-name BHANU-AWS-EKS-ECR --capabilities CAPABILITY_NAMED_IAM
    
    - name: Create EKS ECR
      id: eksctl_create_EKS_ECR
      run: |
        #eksctl create cluster --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}
        #aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY1 }} --region ${{ env.AWS_REGION }}
        #aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY2 }} --region ${{ env.AWS_REGION }}
    
    #- name: Wait for 30 minutes to complete AWS CFT
      # You may pin to the exact commit or the version.
      # uses: jakejarvis/wait-action@919fc193e07906705e5b7a50f90ea9e74d20b2b0
      #uses: jakejarvis/wait-action@v0.1.1
      #with:
        # Follows the Linux sleep syntax for time units: a number followed by s for seconds, m for minutes, etc
        #time: 30m
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon MEDIAWIKI ECR
      id: build-image-mediawiki
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY1:latest -f Dockerfile-mediawiki .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY1:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY1:latest" >> $GITHUB_OUTPUT

    - name: Build, tag, and push image to Amazon mariaDB ECR
      id: build-image-db
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY2:latest -f Dockerfile-mariaDB .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY2:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY2:latest" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v2
    - name: Run kubectl
      uses: nikosch86/github-action-eks-kubectl@main
      with:
        command: "apply -f deployment.yaml"
      env:
        EKS_CLUSTER: ${{ env.EKS_CLUSTER }}
    - name: Run kubectl
      uses: nikosch86/github-action-eks-kubectl@main
      with:
        command: "apply -f service.yaml"
      env:
        EKS_CLUSTER: ${{ env.EKS_CLUSTER }}
    - name: Run kubectl
      uses: nikosch86/github-action-eks-kubectl@main
      with:
        command: "create namespace ${{ env.NAMESPACE }}"
      env:
        EKS_CLUSTER: ${{ env.EKS_CLUSTER }}
    - name: Run kubectl
      uses: nikosch86/github-action-eks-kubectl@main
      with:
        command: "kubectl create configmap sample_csv_file --from-file=samplecsv.csv -n ${{ env.NAMESPACE }}"
      env:
        EKS_CLUSTER: ${{ env.EKS_CLUSTER }}
    - name: Run kubectl
      uses: nikosch86/github-action-eks-kubectl@main
      with:
        command: "apply -f replica-3pods-deployment.yaml -n ${{ env.NAMESPACE }}"
      env:
        EKS_CLUSTER: ${{ env.EKS_CLUSTER }}
